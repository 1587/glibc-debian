#!/bin/bash
set -e
export LC_ALL=C

if [ "$1" = upgrade ]
then
    if [ -f /var/lib/dpkg/info/timezone.postrm ]; then
	rm -f /var/lib/dpkg/info/timezone.postrm
    fi
    if [ -f /var/lib/dpkg/info/timezones.postrm ]; then
	rm -f /var/lib/dpkg/info/timezones.postrm
    fi
    if dpkg --compare-versions "$2" lt 2.1.3-8; then
	if [ -s /etc/timezone ]; then
	    cp -a /etc/timezone /etc/timezone.save
	fi
    fi
    if dpkg --compare-versions "$2" le 2.2.2-4 && test -e /lib/libdb.so.3; then
	# Make upgrades to newer libdb.so.3 easier
	cat /lib/libdb.so.3 > /lib/libdb.so.3.old
    fi
    if dpkg --compare-versions "$2" le 2.1.1-0.1; then
	if [ -f /var/run/utmpd.pid ]; then
	    if kill -TERM `cat /var/run/utmpd.pid` > /dev/null 2>&1
	    then
		if [ -f /var/run/utmp ]; then
		    cp /dev/null /var/run/utmp
		    if grep '^utmp:' /etc/group; then
			chown root:utmp /var/run/utmp
			chmod 664 /var/run/utmp
		    else
			chown root:root /var/run/utmp
			chmod 644 /var/run/utmp
		    fi
		fi
		if [ -f /var/log/wtmp ]; then
		    savelog /var/log/wtmp
		    touch /var/log/wtmp
		    if grep '^utmp:' /etc/group; then
			chown root:utmp /var/log/wtmp
			chmod 664 /var/log/wtmp
		    else
			chown root:root /var/log/wtmp
			chmod 644 /var/log/wtmp
		    fi
		fi
		rm -f /etc/init.d/utmpd
		update-rc.d utmpd remove > /dev/null
	    fi
	fi
	if [ -f /var/run/utmpx ]; then rm -f /var/run/utmpx; fi
	if [ -f /var/log/wtmpx ]; then rm -f /var/log/wtmpx*; fi
	if [ -e /var/run/utmpd.ro ]; then rm -f /var/run/utmpd.ro; fi
	if [ -e /var/run/utmpd.rw ]; then rm -f /var/run/utmpd.rw; fi
    fi

    # NSS authentication trouble guard
    if dpkg --compare-versions $2 lt 2.3.5-1; then
	check="xdm kdm gdm postgresql xscreensaver"
	# Only get the ones that are installed, and configured
	service=$(dpkg -s $check 2> /dev/null | awk 'BEGIN{RS="\n\n";FS="\n"}{if ( $2 ~ /Status: .* installed$/ ) { print $1 } }' | cut -f 2 -d ' ')

	echo
	echo "Name Service Switch update in the C Library: pre-installation question."
	echo
	echo "Running services and programs that are using NSS need to be restarted,"
	echo "otherwise they might not be able to do lookup or authentication any more."
	echo "The installation process is able to restart some services (such as ssh or"
	echo "telnetd), but other programs cannot be restarted automatically.  One such"
	echo "program that needs manual stopping and restart after the glibc upgrade by"
	echo "yourself is xdm - because automatic restart might disconnect your active"
	echo "X11 sessions."
	echo
	echo "Known packages that need to be stopped before the glibc upgrade are:"
	echo "        $check"

	if [ -n "$service" ]; then 
	    echo "This script detects the following services which you are required"
	    echo "to stop before the upgrade:"
	    echo "        $service"
	else
	    echo "This script does not detect any services to stop now."
	fi
	echo
	echo "If you want to interrupt the upgrade now and continue later, please"
	echo "answer No to the question below."
	echo 
	frontend=`echo "$DEBIAN_FRONTEND" | tr '[:upper:]' '[:lower:]'`
	if [ "$frontend" = noninteractive ]; then
	    echo "Non-interactive mode, upgrade glibc forcibly"
	    answer=yes
	else
	    echo -n "Do you want to upgrade glibc now? [Y/n] "
	    read answer
	    case $answer in
		Y*|y*) answer=yes ;;
		N*|n*) answer=no ;;
		*) answer=yes ;;
	    esac
	fi
	echo
	if [ "$answer" = no ]; then
	    echo "Stopped glibc upgrade.  Please retry the upgrade after you have"
	    echo "checked or stopped services by hand."
	    exit 1
	fi
    fi

    # This will keep us from using hwcap libs (optimized) during an
    # upgrade.
    touch /etc/ld.so.nohwcap
    echo glibc >> /etc/ld.so.nohwcap
fi

# Sanity check.
# If there are versions of glibc outside of the normal installation
# location (/lib, /lib64, etc.) then things may break very badly
# as soon as ld.so is replaced by a new version.  This check is not
# foolproof, but it's pretty accurate.  This script ignores old
# libc4 or libc5, and libraries incompatible with the to-be-installed
# ld.so.

check_dirs () {
  for dir in $*; do
    # Handle /lib in LD_LIBRARY_PATH.
    if expr $dir : "/lib.*" > /dev/null; then
      continue
    fi
    # Skip ia32-libs package on ia64, and similar libraries
    # (not sure why these get added to /etc/ld.so.conf)
    if expr $dir : "/emul/.*" > /dev/null; then
      continue
    fi
    if test -d $dir; then
      output=$(ls $dir | egrep '^lib(c|m|pthread|rt|dl)\.so\.[^/]*$' |\
	       egrep -v '^lib[cm]\.so\.[45].*$' 2>/dev/null)

      if test -n "$output"; then
	# See if the found libraries are compatible with the system ld.so;
	# if they aren't, they'll be ignored.  Check e_ident, e_type (which
	# will just be ET_DYN), and e_machine.  Assume that if one doesn't
	# match, none of them will.
	if test -f "$ld_so"; then
	  lib=$dir/`echo "$output" | head -1`
	  if test -f "$lib"; then
	    ldbytes=`head -c 20 $ld_so | od -c`
	    libbytes=`head -c 20 $lib | od -c`
	    if test "$ldbytes" != "$libbytes"; then
	      return 1
	    fi
	  fi
	fi

	echo "These libraries were found in $dir:"
	echo "$output"
	return 0
      fi
    fi
  done
  return 1
}

if [ "$1" != abort-upgrade ]
then
  # First find the system ld.so.
  ld_so=`ldd /bin/bash | sed 's/^\t//; s/ .*//' | grep /ld`

  dirs="/usr/local/lib /usr/local/lib32 /usr/local/lib64"
  if ! test -L /usr; then
    dirs="$dirs /usr/lib /usr/lib32 /usr/lib64"
  fi
  if check_dirs $dirs; then
    echo
    echo "A copy of glibc was found in an unexpected directory."
    echo "It is not safe to upgrade the C library in this situation;"
    echo "please remove that copy of the C library and try again."
    exit 1
  fi

  if test -n "$LD_LIBRARY_PATH"; then
    dirs=$(echo $LD_LIBRARY_PATH | sed 's/:/ /')
    if check_dirs $dirs; then
      echo
      echo "Another copy of the C library was found via LD_LIBRARY_PATH."
      echo "It is not safe to upgrade the C library in this situation;"
      echo "please remove the directory from LD_LIBRARY_PATH and try again."
      exit 1
    fi
  fi
  if test -e /etc/ld.so.conf; then
    dirs=$(echo $(cat /etc/ld.so.conf))
    if check_dirs $dirs; then
      echo
      echo "Another copy of the C library was found via /etc/ld.so.conf."
      echo "It is not safe to upgrade the C library in this situation;"
      echo "please remove the directory from /etc/ld.so.conf and try again."
      exit 1
    fi
  fi
fi

if [ "$1" != abort-upgrade ] && [ "`uname -s`" = Linux ]
then
    # glibc kernel version check: KERNEL_VERSION_CHECK
fi

#DEBHELPER#

exit 0
