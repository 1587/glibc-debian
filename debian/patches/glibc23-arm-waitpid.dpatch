#! /bin/sh -e

# All lines beginning with `# DP:' are a description of the patch.
# DP: Description: ARM does not have sys_waitpid, but arm kernel-headers
# DP:		has wrong sys_waitpid entry.  Recent glibc use the real
# DP:		sys_waitpid, not sys_wait4.  It breaks arm ld-linux
# DP:		loading.  This patch fixes the problem.
# DP: Author: Philip Blundell <pb@nexus.co.uk>
# DP: Upstream status: Debian-Specific
# DP: Status Details: 
# DP: Date: 2003-07-18

if [ $# -ne 2 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch) patch -d "$2" -f --no-backup-if-mismatch -p0 < $0;;
    -unpatch) patch -d "$2" -f --no-backup-if-mismatch -R -p0 < $0;;
    *)
	echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
	exit 1
esac
exit 0

# append the patch here and adjust the -p? flag in the patch calls.
--- sysdeps/unix/sysv/linux/arm/waitpid.c	1970-01-01 09:00:00.000000000 +0900
+++ sysdeps/unix/sysv/linux/arm/waitpid.c	2003-07-19 00:19:08.000000000 +0900
@@ -0,0 +1,50 @@
+/* Copyright (C) 1991,92,95,96,97,2002,2003 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <errno.h>
+#include <sysdep-cancel.h>
+#include <stdlib.h>
+#include <sys/wait.h>
+
+__pid_t
+__libc_waitpid (__pid_t pid, int *stat_loc, int options)
+{
+  if (SINGLE_THREAD_P)
+    {
+#if 0 //def __NR_waitpid
+      return INLINE_SYSCALL (waitpid, 3, pid, stat_loc, options);
+#else
+      return INLINE_SYSCALL (wait4, 4, pid, stat_loc, options, NULL);
+#endif
+    }
+
+  int oldtype = LIBC_CANCEL_ASYNC ();
+
+#if 0 // def __NR_waitpid
+  int result = INLINE_SYSCALL (waitpid, 3, pid, stat_loc, options);
+#else
+  int result = INLINE_SYSCALL (wait4, 4, pid, stat_loc, options, NULL);
+#endif
+
+  LIBC_CANCEL_RESET (oldtype);
+
+  return result;
+}
+weak_alias (__libc_waitpid, __waitpid)
+libc_hidden_weak (__waitpid)
+weak_alias (__libc_waitpid, waitpid)
Index: sysdeps/unix/sysv/linux/not-cancel.h
===================================================================
RCS file: /cvs/glibc/libc/sysdeps/unix/sysv/linux/not-cancel.h,v
retrieving revision 1.4
diff -u -r1.4 not-cancel.h
--- sysdeps/unix/sysv/linux/not-cancel.h	15 Jul 2003 06:41:45 -0000	1.4
+++ sysdeps/unix/sysv/linux/not-cancel.h	21 Aug 2003 20:51:12 -0000
@@ -47,7 +47,7 @@
 	    INTERNAL_SYSCALL (writev, err, 3, (fd), (iov), (n)); })
 
 /* Uncancelable waitpid.  */
-#ifdef __NR_waitpid
+#if defined (__NR_waitpid) && !defined(__arm__)
 # define waitpid_not_cancel(pid, stat_loc, options) \
   INLINE_SYSCALL (waitpid, 3, pid, stat_loc, options)
 #else
