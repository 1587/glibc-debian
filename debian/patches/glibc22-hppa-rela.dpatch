#! /bin/sh -e

# DP: PA-RISC rel / rela changes.

if [ $# -ne 2 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch) patch -d "$2" -f --no-backup-if-mismatch -p1 < $0;;
    -unpatch) patch -d "$2" -f --no-backup-if-mismatch -R -p1 < $0;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

diff -urN glibc-2.2.4.orig/elf/do-rel.h glibc-2.2.4/elf/do-rel.h
--- glibc-2.2.4.orig/elf/do-rel.h	Wed Nov 14 09:37:23 2001
+++ glibc-2.2.4/elf/do-rel.h	Wed Nov 14 09:46:02 2001
@@ -86,7 +86,7 @@
 # endif
 #endif
 	  for (; relative < r; ++relative)
-	    elf_machine_rel_relative (l_addr, relative,
+	    elf_machine_rel_relative (map, l_addr, relative,
 				      (void *) (l_addr + relative->r_offset));
 
       if (map->l_info[VERSYMIDX (DT_VERSYM)])
diff -urN glibc-2.2.4.orig/elf/dynamic-link.h glibc-2.2.4/elf/dynamic-link.h
--- glibc-2.2.4.orig/elf/dynamic-link.h	Mon Jul 23 13:53:40 2001
+++ glibc-2.2.4/elf/dynamic-link.h	Wed Nov 14 09:46:02 2001
@@ -139,24 +139,26 @@
     struct { ElfW(Addr) start, size; int lazy; } ranges[3];		      \
     int ranges_index;							      \
 									      \
-    ranges[0].lazy = ranges[2].lazy = 0;				      \
-    ranges[1].lazy = 1;							      \
     ranges[0].size = ranges[1].size = ranges[2].size = 0;		      \
 									      \
     if ((map)->l_info[DT_##RELOC])					      \
       {									      \
 	ranges[0].start = D_PTR ((map), l_info[DT_##RELOC]);		      \
 	ranges[0].size = (map)->l_info[DT_##RELOC##SZ]->d_un.d_val;	      \
+	ranges[0].lazy = 0;						      \
       }									      \
 									      \
      if ((do_lazy)							      \
-	&& (map)->l_info[DT_PLTREL]					      \
-	&& (!test_rel || (map)->l_info[DT_PLTREL]->d_un.d_val == DT_##RELOC)) \
+	 && (map)->l_info[DT_PLTREL]					      \
+	 && (!test_rel							      \
+	     || (map)->l_info[DT_PLTREL]->d_un.d_val == DT_##RELOC))	      \
       {									      \
 	ranges[1].start = D_PTR ((map), l_info[DT_JMPREL]);		      \
 	ranges[1].size = (map)->l_info[DT_PLTRELSZ]->d_un.d_val;	      \
+	ranges[1].lazy = 1;						      \
 	ranges[2].start = ranges[1].start + ranges[1].size;		      \
 	ranges[2].size = ranges[0].start + ranges[0].size - ranges[2].start;  \
+	ranges[2].lazy = 0;						      \
 	ranges[0].size = ranges[1].start - ranges[0].start;		      \
       }									      \
 									      \
@@ -171,15 +173,16 @@
   do {									      \
     struct { ElfW(Addr) start, size; int lazy; } ranges[2];		      \
     int ranges_index;							      \
-    ranges[0].lazy = 0;							      \
+									      \
     ranges[0].size = ranges[1].size = 0;				      \
-    ranges[0].start = 0;						      \
 									      \
     if ((map)->l_info[DT_##RELOC])					      \
       {									      \
         ranges[0].start = D_PTR ((map), l_info[DT_##RELOC]);		      \
         ranges[0].size = (map)->l_info[DT_##RELOC##SZ]->d_un.d_val;	      \
+	ranges[0].lazy = 0;						      \
       }									      \
+									      \
     if ((map)->l_info[DT_PLTREL]					      \
 	&& (!test_rel || (map)->l_info[DT_PLTREL]->d_un.d_val == DT_##RELOC)) \
       {									      \
diff -urN glibc-2.2.4.orig/sysdeps/alpha/dl-machine.h glibc-2.2.4/sysdeps/alpha/dl-machine.h
--- glibc-2.2.4.orig/sysdeps/alpha/dl-machine.h	Wed Nov 14 09:37:24 2001
+++ glibc-2.2.4/sysdeps/alpha/dl-machine.h	Wed Nov 14 09:46:02 2001
@@ -537,7 +537,8 @@
 }
 
 static inline void
-elf_machine_rela_relative (Elf64_Addr l_addr, const Elf64_Rela *reloc,
+elf_machine_rela_relative (struct link_map *map, Elf64_Addr l_addr,
+			   const Elf64_Rela *reloc,
 			   Elf64_Addr *const reloc_addr)
 {
   /* XXX Make some timings.  Maybe it's preverable to test for
diff -urN glibc-2.2.4.orig/sysdeps/arm/dl-machine.h glibc-2.2.4/sysdeps/arm/dl-machine.h
--- glibc-2.2.4.orig/sysdeps/arm/dl-machine.h	Wed Nov 14 09:37:24 2001
+++ glibc-2.2.4/sysdeps/arm/dl-machine.h	Wed Nov 14 09:46:02 2001
@@ -518,7 +518,8 @@
 }
 
 static inline void
-elf_machine_rel_relative (Elf32_Addr l_addr, const Elf32_Rel *reloc,
+elf_machine_rel_relative (struct link_map *map, Elf32_Addr l_addr,
+			  const Elf32_Rel *reloc,
 			  Elf32_Addr *const reloc_addr)
 {
   *reloc_addr += l_addr;
diff -urN glibc-2.2.4.orig/sysdeps/cris/dl-machine.h glibc-2.2.4/sysdeps/cris/dl-machine.h
--- glibc-2.2.4.orig/sysdeps/cris/dl-machine.h	Wed Nov 14 09:37:24 2001
+++ glibc-2.2.4/sysdeps/cris/dl-machine.h	Wed Nov 14 09:46:02 2001
@@ -366,7 +366,8 @@
 }
 
 static inline void
-elf_machine_rela_relative (Elf32_Addr l_addr, const Elf32_Rela *reloc,
+elf_machine_rela_relative (struct link_map *map, Elf32_Addr l_addr,
+			   const Elf32_Rela *reloc,
 			   Elf32_Addr *const reloc_addr)
 {
   *reloc_addr = l_addr + reloc->r_addend;
diff -urN glibc-2.2.4.orig/sysdeps/hppa/dl-machine.h glibc-2.2.4/sysdeps/hppa/dl-machine.h
--- glibc-2.2.4.orig/sysdeps/hppa/dl-machine.h	Wed Nov 14 09:47:09 2001
+++ glibc-2.2.4/sysdeps/hppa/dl-machine.h	Wed Nov 14 09:46:02 2001
@@ -628,11 +629,51 @@
   *reloc_addr = value;
 }
 
+/* hppa doesn't have an R_PARISC_RELATIVE reloc, but uses relocs with
+   ELF32_R_SYM (info) == 0 for a similar purpose.  */
 static inline void
-elf_machine_rela_relative (Elf32_Addr l_addr, const Elf32_Rela *reloc,
+elf_machine_rela_relative (struct link_map *map, Elf32_Addr l_addr,
+			   const Elf32_Rela *reloc,
 			   Elf32_Addr *const reloc_addr)
 {
-  /* XXX Nothing to do.  There is no relative relocation, right?  */
+  unsigned long const r_type = ELF32_R_TYPE (reloc->r_info);
+  Elf32_Addr value;
+
+  value = l_addr + reloc->r_addend;
+
+  if (ELF32_R_SYM (reloc->r_info) != 0)
+    asm volatile ("iitlbp	%r0,(%r0)");  /* Crash. */
+
+  switch (r_type)
+    {
+    case R_PARISC_DIR32:
+      /* .eh_frame can have unaligned relocs.  */
+      if ((unsigned long) reloc_addr & 3)
+	{
+	  char *rel_addr = (char *) reloc_addr;
+	  rel_addr[0] = value >> 24;
+	  rel_addr[1] = value >> 16;
+	  rel_addr[2] = value >> 8;
+	  rel_addr[3] = value;
+	  return;
+	}
+      break;
+
+    case R_PARISC_PLABEL32:
+      break;
+
+    case R_PARISC_IPLT:
+      elf_machine_fixup_plt (NULL, map, reloc, reloc_addr, value);
+      return;
+
+    case R_PARISC_NONE:
+      return;
+
+    default:
+      _dl_reloc_bad_type (map, r_type, 0);
+    }
+
+  *reloc_addr = value;
 }
 
 static inline void
diff -urN glibc-2.2.4.orig/sysdeps/i386/dl-machine.h glibc-2.2.4/sysdeps/i386/dl-machine.h
--- glibc-2.2.4.orig/sysdeps/i386/dl-machine.h	Wed Nov 14 09:37:24 2001
+++ glibc-2.2.4/sysdeps/i386/dl-machine.h	Wed Nov 14 09:46:02 2001
@@ -379,7 +379,8 @@
 }
 
 static inline void
-elf_machine_rel_relative (Elf32_Addr l_addr, const Elf32_Rel *reloc,
+elf_machine_rel_relative (struct link_map *map, Elf32_Addr l_addr,
+			  const Elf32_Rel *reloc,
 			  Elf32_Addr *const reloc_addr)
 {
   assert (ELF32_R_TYPE (reloc->r_info) == R_386_RELATIVE);
diff -urN glibc-2.2.4.orig/sysdeps/ia64/dl-machine.h glibc-2.2.4/sysdeps/ia64/dl-machine.h
--- glibc-2.2.4.orig/sysdeps/ia64/dl-machine.h	Wed Nov 14 09:37:24 2001
+++ glibc-2.2.4/sysdeps/ia64/dl-machine.h	Wed Nov 14 09:46:02 2001
@@ -580,7 +580,8 @@
 }
 
 static inline void
-elf_machine_rela_relative (Elf64_Addr l_addr, const Elf64_Rela *reloc,
+elf_machine_rela_relative (struct link_map *map, Elf64_Addr l_addr,
+			   const Elf64_Rela *reloc,
 			   Elf64_Addr *const reloc_addr)
 {
   /* ??? Ignore MSB and Instruction format for now.  */
diff -urN glibc-2.2.4.orig/sysdeps/m68k/dl-machine.h glibc-2.2.4/sysdeps/m68k/dl-machine.h
--- glibc-2.2.4.orig/sysdeps/m68k/dl-machine.h	Wed Nov 14 09:37:24 2001
+++ glibc-2.2.4/sysdeps/m68k/dl-machine.h	Wed Nov 14 09:46:02 2001
@@ -299,7 +299,8 @@
 }
 
 static inline void
-elf_machine_rela_relative (Elf32_Addr l_addr, const Elf32_Rela *reloc,
+elf_machine_rela_relative (struct link_map *map, Elf32_Addr l_addr,
+			   const Elf32_Rela *reloc,
 			   Elf32_Addr *const reloc_addr)
 {
   *reloc_addr = l_addr + reloc->r_addend;
diff -urN glibc-2.2.4.orig/sysdeps/mips/dl-machine.h glibc-2.2.4/sysdeps/mips/dl-machine.h
--- glibc-2.2.4.orig/sysdeps/mips/dl-machine.h	Wed Nov 14 09:37:24 2001
+++ glibc-2.2.4/sysdeps/mips/dl-machine.h	Wed Nov 14 09:46:02 2001
@@ -535,7 +535,8 @@
 }
 
 static inline void
-elf_machine_rel_relative (ElfW(Addr) l_addr, const ElfW(Rel) *reloc,
+elf_machine_rel_relative (struct link_map *map, ElfW(Addr) l_addr,
+			  const ElfW(Rel) *reloc,
 			  ElfW(Addr) *const reloc_addr)
 {
   /* XXX Nothing to do.  There is no relative relocation, right?  */
diff -urN glibc-2.2.4.orig/sysdeps/mips/mips64/dl-machine.h glibc-2.2.4/sysdeps/mips/mips64/dl-machine.h
--- glibc-2.2.4.orig/sysdeps/mips/mips64/dl-machine.h	Wed Nov 14 09:37:24 2001
+++ glibc-2.2.4/sysdeps/mips/mips64/dl-machine.h	Wed Nov 14 09:46:02 2001
@@ -576,7 +576,8 @@
 }
 
 static inline void
-elf_machine_rel_relative (ElfW(Addr) l_addr, const ElfW(Rel) *reloc,
+elf_machine_rel_relative (struct link_map *map, ElfW(Addr) l_addr,
+			  const ElfW(Rel) *reloc,
 			  ElfW(Addr) *const reloc_addr)
 {
   /* XXX Nothing to do.  There is no relative relocation, right?  */
diff -urN glibc-2.2.4.orig/sysdeps/powerpc/dl-machine.h glibc-2.2.4/sysdeps/powerpc/dl-machine.h
--- glibc-2.2.4.orig/sysdeps/powerpc/dl-machine.h	Wed Nov 14 09:37:24 2001
+++ glibc-2.2.4/sysdeps/powerpc/dl-machine.h	Wed Nov 14 09:46:02 2001
@@ -394,7 +394,8 @@
 }
 
 static inline void
-elf_machine_rela_relative (Elf32_Addr l_addr, const Elf32_Rela *reloc,
+elf_machine_rela_relative (struct link_map *map, Elf32_Addr l_addr,
+			   const Elf32_Rela *reloc,
 			   Elf32_Addr *const reloc_addr)
 {
   *reloc_addr = l_addr + reloc->r_addend;
diff -urN glibc-2.2.4.orig/sysdeps/s390/s390-32/dl-machine.h glibc-2.2.4/sysdeps/s390/s390-32/dl-machine.h
--- glibc-2.2.4.orig/sysdeps/s390/s390-32/dl-machine.h	Wed Nov 14 09:37:24 2001
+++ glibc-2.2.4/sysdeps/s390/s390-32/dl-machine.h	Wed Nov 14 09:46:02 2001
@@ -440,7 +440,8 @@
 }
 
 static inline void
-elf_machine_rela_relative (Elf32_Addr l_addr, const Elf32_Rela *reloc,
+elf_machine_rela_relative (struct link_map *map, Elf32_Addr l_addr,
+			   const Elf32_Rela *reloc,
 			   Elf32_Addr *const reloc_addr)
 {
   *reloc_addr = l_addr + reloc->r_addend;
diff -urN glibc-2.2.4.orig/sysdeps/s390/s390-64/dl-machine.h glibc-2.2.4/sysdeps/s390/s390-64/dl-machine.h
--- glibc-2.2.4.orig/sysdeps/s390/s390-64/dl-machine.h	Wed Nov 14 09:37:24 2001
+++ glibc-2.2.4/sysdeps/s390/s390-64/dl-machine.h	Wed Nov 14 09:46:02 2001
@@ -420,7 +420,8 @@
 }
 
 static inline void
-elf_machine_rela_relative (Elf64_Addr l_addr, const Elf64_Rela *reloc,
+elf_machine_rela_relative (struct link_map *map, Elf64_Addr l_addr,
+			   const Elf64_Rela *reloc,
 			   Elf64_Addr *const reloc_addr)
 {
   *reloc_addr = l_addr + reloc->r_addend;
diff -urN glibc-2.2.4.orig/sysdeps/sh/dl-machine.h glibc-2.2.4/sysdeps/sh/dl-machine.h
--- glibc-2.2.4.orig/sysdeps/sh/dl-machine.h	Wed Nov 14 09:37:24 2001
+++ glibc-2.2.4/sysdeps/sh/dl-machine.h	Wed Nov 14 09:46:02 2001
@@ -558,7 +558,8 @@
 }
 
 static inline void
-elf_machine_rela_relative (Elf32_Addr l_addr, const Elf32_Rela *reloc,
+elf_machine_rela_relative (struct link_map *map, Elf32_Addr l_addr,
+			   const Elf32_Rela *reloc,
 			   Elf32_Addr *const reloc_addr)
 {
   Elf32_Addr value;
diff -urN glibc-2.2.4.orig/sysdeps/sparc/sparc32/dl-machine.h glibc-2.2.4/sysdeps/sparc/sparc32/dl-machine.h
--- glibc-2.2.4.orig/sysdeps/sparc/sparc32/dl-machine.h	Wed Nov 14 09:37:24 2001
+++ glibc-2.2.4/sysdeps/sparc/sparc32/dl-machine.h	Wed Nov 14 09:46:02 2001
@@ -461,7 +461,8 @@
 }
 
 static inline void
-elf_machine_rela_relative (Elf32_Addr l_addr, const Elf32_Rela *reloc,
+elf_machine_rela_relative (struct link_map *map, Elf32_Addr l_addr,
+			   const Elf32_Rela *reloc,
 			   Elf32_Addr *const reloc_addr)
 {
   *reloc_addr += l_addr + reloc->r_addend;
diff -urN glibc-2.2.4.orig/sysdeps/sparc/sparc64/dl-machine.h glibc-2.2.4/sysdeps/sparc/sparc64/dl-machine.h
--- glibc-2.2.4.orig/sysdeps/sparc/sparc64/dl-machine.h	Wed Nov 14 09:37:24 2001
+++ glibc-2.2.4/sysdeps/sparc/sparc64/dl-machine.h	Wed Nov 14 09:46:02 2001
@@ -413,7 +413,8 @@
 }
 
 static inline void
-elf_machine_rela_relative (Elf64_Addr l_addr, const Elf64_Rela *reloc,
+elf_machine_rela_relative (struct link_map *map, Elf64_Addr l_addr,
+			   const Elf64_Rela *reloc,
 			   Elf64_Addr *const reloc_addr)
 {
   *reloc_addr = l_addr + reloc->r_addend;
diff -urN glibc-2.2.4.orig/sysdeps/x86_64/dl-machine.h glibc-2.2.4/sysdeps/x86_64/dl-machine.h
--- glibc-2.2.4.orig/sysdeps/x86_64/dl-machine.h	Wed Nov 14 09:37:24 2001
+++ glibc-2.2.4/sysdeps/x86_64/dl-machine.h	Wed Nov 14 09:46:02 2001
@@ -393,7 +393,8 @@
 }
 
 static inline void
-elf_machine_rela_relative (Elf64_Addr l_addr, const Elf64_Rela *reloc,
+elf_machine_rela_relative (struct link_map *map, Elf64_Addr l_addr,
+			   const Elf64_Rela *reloc,
 			   Elf64_Addr *const reloc_addr)
 {
   assert (ELF64_R_TYPE (reloc->r_info) == R_X86_64_RELATIVE);
