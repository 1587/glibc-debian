Description: Use stdc-predef.h from glibc instead of eglibc
Author: Adam Conrad <adconrad@ubuntu.com>
Bug-Debian: http://bugs.debian.org/717557

--- eglibc-2.18.orig/Makefile
+++ eglibc-2.18/Makefile
@@ -59,7 +59,7 @@ endif # $(AUTOCONF) = no
 		   $(addprefix install-, no-libc.a bin lib data headers others)
 
 headers := limits.h values.h features.h gnu-versions.h bits/libc-lock.h \
-	   bits/xopen_lim.h gnu/libc-version.h stdc-predef.h bits/predefs.h
+	   bits/xopen_lim.h gnu/libc-version.h stdc-predef.h
 
 echo-headers: subdir_echo-headers
 
--- eglibc-2.18.orig/include/stdc-predef.h
+++ eglibc-2.18/include/stdc-predef.h
@@ -26,8 +26,36 @@
    explicitly includes a system header.  GCC knows the name of this
    header in order to preinclude it.  */
 
-/* Define __STDC_IEC_559__ and other similar macros.  */
-#include <bits/predefs.h>
+/* glibc's intent is to support the IEC 559 math functionality, real
+   and complex.  If the GCC (4.9 and later) predefined macros
+   specifying compiler intent are available, use them to determine
+   whether the overall intent is to support these features; otherwise,
+   presume an older compiler has intent to support these features and
+   define these macros by default.  */
+
+#ifdef __GCC_IEC_559
+# if __GCC_IEC_559 > 0
+#  define __STDC_IEC_559__		1
+# endif
+#elif defined (__arm__)
+# if defined (__VFP_FP__) && !defined (__SOFTFP__)
+#  define __STDC_IEC_559__		1
+# endif
+#else
+# define __STDC_IEC_559__		1
+#endif
+
+#ifdef __GCC_IEC_559_COMPLEX
+# if __GCC_IEC_559_COMPLEX > 0
+#  define __STDC_IEC_559_COMPLEX__	1
+# endif
+#elif defined (__arm__)
+# if defined (__VFP_FP__) && !defined (__SOFTFP__)
+#  define __STDC_IEC_559_COMPLEX__	1
+# endif
+#else
+# define __STDC_IEC_559_COMPLEX__	1
+#endif
 
 /* wchar_t uses ISO/IEC 10646 (2nd ed., published 2011-03-15) /
    Unicode 6.0.  */
