2009-07-26  Ulrich Drepper  <drepper@redhat.com>

	[BZ #10418]
	* pthread_mutex_lock.c (pthread_mutex_lock): Use _rel instead of of
	_acq variants of cmpxchg.
	* pthread_mutex_timedlock.c (pthread_mutex_timedlock): Likewise.
 
 	* sysdeps/x86_64/configure.in: New file.
---
 nptl/pthread_mutex_lock.c      |   10 +++++-----
 nptl/pthread_mutex_timedlock.c |   12 ++++++------
 2 files changed, 11 insertions(+), 11 deletions(-)

--- a/nptl/pthread_mutex_lock.c
+++ b/nptl/pthread_mutex_lock.c
@@ -160,7 +160,7 @@
 #endif
 
 	      newval
-		= atomic_compare_and_exchange_val_acq (&mutex->__data.__lock,
+		= atomic_compare_and_exchange_val_rel (&mutex->__data.__lock,
 						       newval, oldval);
 
 	      if (newval != oldval)
@@ -285,7 +285,7 @@
 #ifdef NO_INCR
 	newval |= FUTEX_WAITERS;
 #endif
-	oldval = atomic_compare_and_exchange_val_acq (&mutex->__data.__lock,
+	oldval = atomic_compare_and_exchange_val_rel (&mutex->__data.__lock,
 						      newval, 0);
 
 	if (oldval != 0)
@@ -420,7 +420,7 @@
 	    oldprio = ceiling;
 
 	    oldval
-	      = atomic_compare_and_exchange_val_acq (&mutex->__data.__lock,
+	      = atomic_compare_and_exchange_val_rel (&mutex->__data.__lock,
 #ifdef NO_INCR
 						     ceilval | 2,
 #else
@@ -434,7 +434,7 @@
 	    do
 	      {
 		oldval
-		  = atomic_compare_and_exchange_val_acq (&mutex->__data.__lock,
+		  = atomic_compare_and_exchange_val_rel (&mutex->__data.__lock,
 							 ceilval | 2,
 							 ceilval | 1);
 
@@ -445,7 +445,7 @@
 		  lll_futex_wait (&mutex->__data.__lock, ceilval | 2,
 				  PTHREAD_MUTEX_PSHARED (mutex));
 	      }
-	    while (atomic_compare_and_exchange_val_acq (&mutex->__data.__lock,
+	    while (atomic_compare_and_exchange_val_rel (&mutex->__data.__lock,
 							ceilval | 2, ceilval)
 		   != ceilval);
 	  }
--- a/nptl/pthread_mutex_timedlock.c
+++ b/nptl/pthread_mutex_timedlock.c
@@ -1,4 +1,4 @@
-/* Copyright (C) 2002-2007, 2008 Free Software Foundation, Inc.
+/* Copyright (C) 2002-2007, 2008, 2009 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
    Contributed by Ulrich Drepper <drepper@redhat.com>, 2002.
 
@@ -126,7 +126,7 @@
 	      int newval = id | (oldval & FUTEX_WAITERS);
 
 	      newval
-		= atomic_compare_and_exchange_val_acq (&mutex->__data.__lock,
+		= atomic_compare_and_exchange_val_rel (&mutex->__data.__lock,
 						       newval, oldval);
 	      if (newval != oldval)
 		{
@@ -246,7 +246,7 @@
 	      }
 	  }
 
-	oldval = atomic_compare_and_exchange_val_acq (&mutex->__data.__lock,
+	oldval = atomic_compare_and_exchange_val_rel (&mutex->__data.__lock,
 						      id, 0);
 
 	if (oldval != 0)
@@ -404,7 +404,7 @@
 	    oldprio = ceiling;
 
 	    oldval
-	      = atomic_compare_and_exchange_val_acq (&mutex->__data.__lock,
+	      = atomic_compare_and_exchange_val_rel (&mutex->__data.__lock,
 						     ceilval | 1, ceilval);
 
 	    if (oldval == ceilval)
@@ -413,7 +413,7 @@
 	    do
 	      {
 		oldval
-		  = atomic_compare_and_exchange_val_acq (&mutex->__data.__lock,
+		  = atomic_compare_and_exchange_val_rel (&mutex->__data.__lock,
 							 ceilval | 2,
 							 ceilval | 1);
 
@@ -456,7 +456,7 @@
 					  PTHREAD_MUTEX_PSHARED (mutex));
 		  }
 	      }
-	    while (atomic_compare_and_exchange_val_acq (&mutex->__data.__lock,
+	    while (atomic_compare_and_exchange_val_rel (&mutex->__data.__lock,
 							ceilval | 2, ceilval)
 		   != ceilval);
 	  }
