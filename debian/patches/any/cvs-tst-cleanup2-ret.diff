commit 6c8bbad92726eeb50c9bb4107dad80155062eb0a
Author: Siddhesh Poyarekar <siddhesh@redhat.com>
Date:   Tue Sep 3 09:29:01 2013 +0530

    Mark success return value as volatile to work around rescheduling
    
    Resolves #15921
    
    The test case nptl/tst-cleanup2 fails on s390x and power6 due to
    instruction sheduling in gcc.  This was reported in gcc:
    
    http://gcc.gnu.org/bugzilla/show_bug.cgi?id=58034
    
    but it was concluded that gcc is allowed to assume that the first
    argument to sprintf is a character array - NULL not being a valid
    character array.

diff --git a/nptl/tst-cleanup2.c b/nptl/tst-cleanup2.c
index 5bd1609..65af0f2 100644
--- a/nptl/tst-cleanup2.c
+++ b/nptl/tst-cleanup2.c
@@ -34,6 +34,12 @@ static int
 do_test (void)
 {
   char *p = NULL;
+  /* gcc can overwrite the success written value by scheduling instructions
+     around sprintf.  It is allowed to do this since according to C99 the first
+     argument of sprintf is a character array and NULL is not a valid character
+     array.  Mark the return value as volatile so that it gets reloaded on
+     return.  */
+  volatile int ret = 0;
   struct sigaction sa;
 
   sa.sa_handler = sig_handler;
@@ -50,7 +56,7 @@ do_test (void)
   if (setjmp (jmpbuf))
     {
       puts ("Exiting main...");
-      return 0;
+      return ret;
     }
 
   sprintf (p, "This should segv\n");
