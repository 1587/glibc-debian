#! /bin/sh -e

# All lines beginning with `# DP:' are a description of the patch.
# DP: Description: Disable SSE for 2.2.x kernels.
# DP: Related bugs: 218524
# DP: Author: Daniel Jacobowitz <dan@debian.org>
# DP: Upstream status: Not submitted
# DP: Details: Should be submitted, must be regenerated against CVS
# DP: Date: 2003-11-01

if [ $# -ne 2 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch) patch -d "$2" -f --no-backup-if-mismatch -p1 < $0;;
    -unpatch) patch -d "$2" -f --no-backup-if-mismatch -R -p1 < $0;;
    *)
	echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
	exit 1
esac
exit 0

# append the patch here and adjust the -p? flag in the patch calls.
2003-11-01  Daniel Jacobowitz  <drow@mvista.com>

	* sysdeps/i386/dl-machine.h (dl_platform_init): Use
	DL_ADJUST_PROCINFO.
	* sysdeps/unix/sysv/linux/i386/dl-procinfo.h
	(DL_ADJUST_PROCINFO): Define.
	(dl_adjust_procinfo): New function.  Disable SSE and SSE2
	for pre-2.4.x kernels.

--- glibc-2.3.2/sysdeps/i386/dl-machine.h.orig	2003-11-01 15:52:17.000000000 -0500
+++ glibc-2.3.2/sysdeps/i386/dl-machine.h	2003-11-01 15:52:55.000000000 -0500
@@ -25,6 +25,7 @@
 #include <sys/param.h>
 #include <sysdep.h>
 #include <tls.h>
+#include <dl-procinfo.h>
 
 /* Return nonzero iff ELF header is compatible with the running host.  */
 static inline int __attribute__ ((unused))
@@ -357,6 +358,10 @@ dl_platform_init (void)
   if (GL(dl_platform) != NULL && *GL(dl_platform) == '\0')
     /* Avoid an empty string which would disturb us.  */
     GL(dl_platform) = NULL;
+
+#ifdef DL_ADJUST_PROCINFO
+  DL_ADJUST_PROCINFO;
+#endif
 }
 
 static inline Elf32_Addr
--- glibc-2.3.2/sysdeps/unix/sysv/linux/i386/dl-procinfo.h.orig	2003-11-01 15:50:41.000000000 -0500
+++ glibc-2.3.2/sysdeps/unix/sysv/linux/i386/dl-procinfo.h	2003-11-01 15:51:48.000000000 -0500
@@ -126,4 +126,20 @@ _dl_string_platform (const char *str)
   return -1;
 };
 
+#define DL_ADJUST_PROCINFO dl_adjust_procinfo ()
+
+static inline void
+__attribute__ ((unused, always_inline))
+dl_adjust_procinfo (void)
+{
+  if (GL(dl_osversion) < 0x020400)
+    {
+      /* Unfortunately, while the capability is named OSFXSR, it's
+	 actually hardware FXSR direct from CPUID.  And we can't test
+	 CR4 ourselves, because we're in protected mode.  Disable it
+	 for kernels which might not have actually enabled OSFXSR.  */
+      GL(dl_hwcap) &= ~(HWCAP_I386_OSFXSR | HWCAP_I386_XMM | HWCAP_I386_XMM2);
+    }
+}
+
 #endif /* dl-procinfo.h */
