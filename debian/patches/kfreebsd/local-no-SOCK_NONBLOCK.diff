--- a/resolv/res_send.c
+++ b/resolv/res_send.c
@@ -933,6 +933,7 @@
 	if (EXT(statp).nssocks[ns] == -1) {
 		/* only try IPv6 if IPv6 NS and if not failed before */
 		if ((EXT(statp).nscount6 > 0) && !statp->ipv6_unavail) {
+#ifdef SOCK_NONBLOCK
 			if (__builtin_expect (__have_o_nonblock >= 0, 1)) {
 				EXT(statp).nssocks[ns] =
 				  socket(PF_INET6, SOCK_DGRAM|SOCK_NONBLOCK,
@@ -945,6 +946,7 @@
 #endif
 			}
 			if (__builtin_expect (__have_o_nonblock < 0, 0))
+#endif
 				EXT(statp).nssocks[ns] =
 				  socket(PF_INET6, SOCK_DGRAM, 0);
 			if (EXT(statp).nssocks[ns] < 0)
@@ -955,6 +957,7 @@
 			    convaddr4to6(nsap);
 		}
 		if (EXT(statp).nssocks[ns] < 0) {
+#ifdef SOCK_NONBLOCK
 			if (__builtin_expect (__have_o_nonblock >= 0, 1)) {
 				EXT(statp).nssocks[ns]
 				  = socket(PF_INET, SOCK_DGRAM|SOCK_NONBLOCK,
@@ -967,6 +970,7 @@
 #endif
 			}
 			if (__builtin_expect (__have_o_nonblock < 0, 0))
+#endif
 				EXT(statp).nssocks[ns]
 				  = socket(PF_INET, SOCK_DGRAM, 0);
 		}
@@ -994,7 +998,11 @@
 			__res_iclose(statp, false);
 			return (0);
 		}
+#ifdef SOCK_NONBLOCK
 		if (__builtin_expect (__have_o_nonblock < 0, 0)) {
+#else
+                {
+#endif                		
 			/* Make socket non-blocking.  */
 			int fl = __fcntl (EXT(statp).nssocks[ns], F_GETFL);
 			if  (fl != -1)
--- a/nscd/connections.c
+++ b/nscd/connections.c
@@ -1837,6 +1837,7 @@
 	      /* We have a new incoming connection.  Accept the connection.  */
 	      int fd;
 
+#ifdef SOCK_NONBLOCK
 #ifndef __ASSUME_ACCEPT4
 	      fd = -1;
 	      if (have_accept4 >= 0)
@@ -1853,6 +1854,9 @@
 	      if (have_accept4 < 0)
 		fd = TEMP_FAILURE_RETRY (accept (sock, NULL, NULL));
 #endif
+#else
+		fd = TEMP_FAILURE_RETRY (accept (sock, NULL, NULL));
+#endif
 
 	      /* Use the descriptor if we have not reached the limit.  */
 	      if (fd >= 0)
@@ -2042,7 +2046,7 @@
 	  {
 	    /* A new connection.  */
 	    int fd;
-
+#ifdef SOCK_NONBLOCK
 # ifndef __ASSUME_ACCEPT4
 	    fd = -1;
 	    if (have_accept4 >= 0)
@@ -2059,6 +2063,9 @@
 	    if (have_accept4 < 0)
 	      fd = TEMP_FAILURE_RETRY (accept (sock, NULL, NULL));
 # endif
+#else
+	    fd = TEMP_FAILURE_RETRY (accept (sock, NULL, NULL));
+#endif	
 
 	    /* Use the descriptor if we have not reached the limit.  */
 	    if (fd >= 0)
