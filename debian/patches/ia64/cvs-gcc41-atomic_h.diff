2005-05-19  Richard Henderson  <rth@redhat.com>

        * sysdeps/ia64/bits/atomic.h (__arch_compare_and_exchange_bool_32_acq,
        __arch_compare_and_exchange_bool_64_acq,
        __arch_compare_and_exchange_val_32_acq,
        __arch_compare_and_exchange_val_64_acq, atomic_exchange_and_add):
        Use __sync builtin without _si or _di suffix.

===================================================================
RCS file: /cvs/glibc/libc/sysdeps/ia64/bits/atomic.h,v
retrieving revision 1.9
retrieving revision 1.10
diff -u -r1.9 -r1.10
--- libc/sysdeps/ia64/bits/atomic.h	2004/07/18 16:28:59	1.9
+++ libc/sysdeps/ia64/bits/atomic.h	2005/05/21 18:29:17	1.10
@@ -52,12 +52,12 @@
   (abort (), 0)
 
 #define __arch_compare_and_exchange_bool_32_acq(mem, newval, oldval) \
-  (!__sync_bool_compare_and_swap_si ((void *) (mem), (int) (long) (oldval), \
-				     (int) (long) (newval)))
+  (!__sync_bool_compare_and_swap ((mem), (int) (long) (oldval), \
+				  (int) (long) (newval)))
 
 #define __arch_compare_and_exchange_bool_64_acq(mem, newval, oldval) \
-  (!__sync_bool_compare_and_swap_di ((void *) (mem), (long) (oldval), \
-				     (long) (newval)))
+  (!__sync_bool_compare_and_swap ((mem), (long) (oldval), \
+				  (long) (newval)))
 
 #define __arch_compare_and_exchange_val_8_acq(mem, newval, oldval) \
   (abort (), (__typeof (*mem)) 0)
@@ -66,12 +66,11 @@
   (abort (), (__typeof (*mem)) 0)
 
 #define __arch_compare_and_exchange_val_32_acq(mem, newval, oldval) \
-  __sync_val_compare_and_swap_si ((void *) (mem), (int) (long) (oldval), \
-				  (int) (long) (newval))
+  __sync_val_compare_and_swap ((mem), (int) (long) (oldval), \
+			       (int) (long) (newval))
 
 #define __arch_compare_and_exchange_val_64_acq(mem, newval, oldval) \
-  __sync_val_compare_and_swap_di ((void *) (mem), (long) (oldval), \
-				  (long) (newval))
+  __sync_val_compare_and_swap ((mem), (long) (oldval), (long) (newval))
 
 /* Atomically store newval and return the old value.  */
 #define atomic_exchange_acq(mem, value) \
@@ -80,15 +79,9 @@
 #define atomic_exchange_rel(mem, value) \
   (__sync_synchronize (), __sync_lock_test_and_set (mem, value))
 
-
 #define atomic_exchange_and_add(mem, value) \
   ({ __typeof (*mem) __result;						      \
-     if (sizeof (*mem) == 4)						      \
-       __result = __sync_fetch_and_add_si ((void *) (mem), (int) (value));    \
-     else if (sizeof (*mem) == 8)					      \
-       __result = __sync_fetch_and_add_di ((void *) (mem), (long) (value));   \
-     else								      \
-       abort ();							      \
+     __result = __sync_fetch_and_add ((mem), (int) (value));		      \
      __result; })
 
 #define atomic_decrement_if_positive(mem) \

2005-05-21  Ulrich Drepper  <drepper@redhat.com>
(__pthread_spin_lock): Usebitrary revisions
__sync_val_compare_and_swap, not explicit _si variant.
(__pthread_spin_trylock): Likewise.  

===================================================================
RCS file: /cvs/glibc/linuxthreads/linuxthreads/sysdeps/ia64/pspinlock.c,v
retrieving revision 1.4
retrieving revision 1.5
diff -u -r1.4 -r1.5
--- linuxthreads/linuxthreads/sysdeps/ia64/pspinlock.c	2003/03/07 22:22:38	1.4
+++ linuxthreads/linuxthreads/sysdeps/ia64/pspinlock.c	2005/05/21 18:30:17	1.5
@@ -31,7 +31,7 @@
 {
   int *p = (int *) lock;
   
-  while (__builtin_expect (__sync_val_compare_and_swap_si (p, 0, 1), 0))
+  while (__builtin_expect (__sync_val_compare_and_swap (p, 0, 1), 0))
     {
       /* Spin without using the atomic instruction.  */
       do
@@ -46,7 +46,7 @@
 int
 __pthread_spin_trylock (pthread_spinlock_t *lock)
 {
-  return __sync_val_compare_and_swap_si ((int *) lock, 0, 1) == 0 ? 0 : EBUSY;
+  return __sync_val_compare_and_swap ((int *) lock, 0, 1) == 0 ? 0 : EBUSY;
 }
 weak_alias (__pthread_spin_trylock, pthread_spin_trylock)
 
