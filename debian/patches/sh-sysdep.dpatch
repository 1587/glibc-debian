#! /bin/sh -e

# All lines beginning with `# DP:' are a description of the patch.
# DP: SuperH fix

if [ $# -ne 2 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch) patch -d "$2" -f --no-backup-if-mismatch -p1 < $0;;
    -unpatch) patch -d "$2" -f --no-backup-if-mismatch -R -p1 < $0;;
    *)
	echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
	exit 1
esac
exit 0

# append the patch here and adjust the -p? flag in the patch calls.
diff -ruN glibc-2.2.5/linuxthreads/sysdeps/sh/pt-machine.h glibc-2.2.5.new/linuxthreads/sysdeps/sh/pt-machine.h
--- glibc-2.2.5/linuxthreads/sysdeps/sh/pt-machine.h	2001-08-04 21:46:05.000000000 +0900
+++ glibc-2.2.5.new/linuxthreads/sysdeps/sh/pt-machine.h	2002-08-10 19:31:20.000000000 +0900
@@ -53,4 +53,4 @@
 
 /* Initialize the thread-unique value.  */
 #define INIT_THREAD_SELF(descr, nr) \
-  ({ __asm__("ldc %0,gbr" : : "r" (descr));})
+  ({ __asm__ __volatile__("ldc %0,gbr" : : "r" (descr));})
diff -ruN glibc-2.2.5/scripts/config.sub glibc-2.2.5.new/scripts/config.sub
--- glibc-2.2.5/scripts/config.sub	2001-05-11 01:38:26.000000000 +0900
+++ glibc-2.2.5.new/scripts/config.sub	2002-08-10 19:06:47.000000000 +0900
@@ -224,7 +224,7 @@
 		| hppa64 \
 		| alpha | alphaev[4-8] | alphaev56 | alphapca5[67] \
 		| alphaev6[78] \
-		| we32k | ns16k | clipper | i370 | sh | sh[34] \
+		| we32k | ns16k | clipper | i370 | sh | sh[34] | sh[34]eb \
 		| powerpc | powerpcle \
 		| 1750a | dsp16xx | pdp10 | pdp11 \
 		| mips16 | mips64 | mipsel | mips64el \
@@ -271,7 +271,7 @@
 	      | alphaev6[78]-* \
 	      | we32k-* | cydra-* | ns16k-* | pn-* | np1-* | xps100-* \
 	      | clipper-* | orion-* \
-	      | sparclite-* | pdp10-* | pdp11-* | sh-* | powerpc-* | powerpcle-* \
+	      | sparclite-* | pdp10-* | pdp11-* | sh-* | sh[34]-* | sh[34]eb-* | powerpc-* | powerpcle-* \
 	      | sparc64-* | sparcv9-* | sparcv9b-* | sparc86x-* \
 	      | mips16-* | mips64-* | mipsel-* \
 	      | mips64el-* | mips64orion-* | mips64orionel-* \
@@ -934,7 +934,7 @@
 	we32k)
 		basic_machine=we32k-att
 		;;
-	sh3 | sh4)
+	sh3 | sh4 | sh3eb | sh4eb )
 		basic_machine=sh-unknown
 		;;
 	sparc | sparcv9 | sparcv9b)
diff -ruN glibc-2.2.5/sysdeps/sh/bits/fenv.h glibc-2.2.5.new/sysdeps/sh/bits/fenv.h
--- glibc-2.2.5/sysdeps/sh/bits/fenv.h	1970-01-01 09:00:00.000000000 +0900
+++ glibc-2.2.5.new/sysdeps/sh/bits/fenv.h	2002-08-10 19:12:35.000000000 +0900
@@ -0,0 +1,72 @@
+/* Copyright (C) 1999, 2000 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef _FENV_H
+# error "Never use <bits/fenv.h> directly; include <fenv.h> instead."
+#endif
+
+
+/* Define bits representing the exception.  We use the bit positions
+   of the appropriate bits in the FPU control word.  */
+enum
+  {
+    FE_INEXACT = 0x04,
+#define FE_INEXACT	FE_INEXACT
+    FE_UNDERFLOW = 0x08,
+#define FE_UNDERFLOW	FE_UNDERFLOW
+    FE_OVERFLOW = 0x10,
+#define FE_OVERFLOW	FE_OVERFLOW
+    FE_DIVBYZERO = 0x20,
+#define FE_DIVBYZERO	FE_DIVBYZERO
+    FE_INVALID = 0x40,
+#define FE_INVALID	FE_INVALID
+  };
+
+#define FE_ALL_EXCEPT \
+	(FE_INEXACT | FE_DIVBYZERO | FE_UNDERFLOW | FE_OVERFLOW | FE_INVALID)
+
+/* The SH FPU supports all of the four defined rounding modes.  We
+   use again the bit positions in the FPU control word as the values
+   for the appropriate macros.  */
+enum
+  {
+    FE_TONEAREST = 0x0,
+#define FE_TONEAREST	FE_TONEAREST
+    FE_TOWARDZERO = 0x1,
+#define FE_TOWARDZERO	FE_TOWARDZERO
+    FE_UPWARD = 0x2,
+#define FE_UPWARD	FE_UPWARD
+    FE_DOWNWARD = 0x3
+#define FE_DOWNWARD	FE_DOWNWARD
+  };
+
+
+/* Type representing exception flags.  */
+typedef unsigned short int fexcept_t;
+
+
+/* Type representing floating-point environment.  This function corresponds
+   to the layout of the block written by the `fstenv'.  */
+typedef struct
+  {
+    unsigned int __fpscr;
+  }
+fenv_t;
+
+/* If the default argument is used we use this value.  */
+#define FE_DFL_ENV	((fenv_t *) -1)
diff -ruN glibc-2.2.5/sysdeps/sh/bits/mathdef.h glibc-2.2.5.new/sysdeps/sh/bits/mathdef.h
--- glibc-2.2.5/sysdeps/sh/bits/mathdef.h	1970-01-01 09:00:00.000000000 +0900
+++ glibc-2.2.5.new/sysdeps/sh/bits/mathdef.h	2002-08-10 19:12:35.000000000 +0900
@@ -0,0 +1,78 @@
+/* Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#if !defined _MATH_H && !defined _COMPLEX_H
+# error "Never use <bits/mathdef.h> directly; include <math.h> instead"
+#endif
+
+
+/* FIXME! This file describes properties of the compiler, not the machine;
+   it should not be part of libc!
+
+   FIXME! This file does not deal with the -fshort-double option of
+   gcc! */
+
+#if defined __USE_ISOC99 && defined _MATH_H && !defined _MATH_H_MATHDEF
+# define _MATH_H_MATHDEF	1
+
+# ifdef __GNUC__
+#  if __STDC__ == 1
+
+/* In GNU or ANSI mode, gcc leaves `float' expressions as-is.  */
+typedef float float_t;		/* `float' expressions are evaluated as
+				   `float'.  */
+typedef double double_t;	/* `double' expressions are evaluated as
+				   `double'.  */
+
+/* Define `INFINITY' as value of type `float'.  */
+#   define INFINITY	HUGE_VALF
+
+#  else
+
+/* For `gcc -traditional', `float' expressions are evaluated as `double'. */
+typedef double float_t;		/* `float' expressions are evaluated as
+				   `double'.  */
+typedef double double_t;	/* `double' expressions are evaluated as
+				   `double'.  */
+
+/* Define `INFINITY' as value of type `float'.  */
+#   define INFINITY	HUGE_VALF
+
+#  endif
+# else
+
+/* Wild guess at types for float_t and double_t. */
+typedef double float_t;
+typedef double double_t;
+
+/* Define `INFINITY' as value of type `float'.  */
+#  define INFINITY	HUGE_VALF
+
+# endif
+
+/* The values returned by `ilogb' for 0 and NaN respectively.  */
+# define FP_ILOGB0	0x80000001
+# define FP_ILOGBNAN	0x7fffffff
+
+#endif	/* ISO C99 */
+
+#ifndef __NO_LONG_DOUBLE_MATH
+/* Signal that we do not really have a `long double'.  The disables the
+   declaration of all the `long double' function variants.  */
+# define __NO_LONG_DOUBLE_MATH	1
+#endif
diff -ruN glibc-2.2.5/sysdeps/sh/elf/start.S glibc-2.2.5.new/sysdeps/sh/elf/start.S
--- glibc-2.2.5/sysdeps/sh/elf/start.S	2001-07-10 09:56:52.000000000 +0900
+++ glibc-2.2.5.new/sysdeps/sh/elf/start.S	2002-08-10 19:12:35.000000000 +0900
@@ -71,6 +71,13 @@
 	mov.l L_abort,r1
 	jsr @r1
 	nop
+
+	/* Dummy opecode to set the flags */
+#ifdef __sh3__
+	shad r0,r1
+#else
+	pref @r0
+#endif
 	.align	2
 L_main:
 	.long	main
diff -ruN glibc-2.2.5/sysdeps/sh/fpu_control.h glibc-2.2.5.new/sysdeps/sh/fpu_control.h
--- glibc-2.2.5/sysdeps/sh/fpu_control.h	1970-01-01 09:00:00.000000000 +0900
+++ glibc-2.2.5.new/sysdeps/sh/fpu_control.h	2002-08-10 19:12:35.000000000 +0900
@@ -0,0 +1,71 @@
+/* FPU control word definitions.  SH version.
+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#ifndef _FPU_CONTROL_H
+#define _FPU_CONTROL_H
+
+#ifdef __SH4__
+
+/* masking of interrupts */
+#define _FPU_MASK_VM	0x0800	/* Invalid operation */
+#define _FPU_MASK_ZM	0x0400	/* Division by zero  */
+#define _FPU_MASK_OM	0x0200	/* Overflow	     */
+#define _FPU_MASK_UM	0x0100	/* Underflow	     */
+#define _FPU_MASK_IM	0x0080	/* Inexact operation */
+
+/* rounding control */
+#define _FPU_RC_NEAREST 0x0	/* RECOMMENDED */
+#define _FPU_RC_ZERO	0x1
+
+#define _FPU_RESERVED 0xffc00000  /* These bits are reserved.  */
+
+/* The fdlibm code requires strict IEEE double precision arithmetic,
+   and no interrupts for exceptions, rounding to nearest.  */
+#define _FPU_DEFAULT	0x00080000 /* Default value.  */
+#define _FPU_IEEE	0x00080f80 /* Default + exceptions enabled. */
+
+/* Macros for accessing the hardware control word.  */
+#define _FPU_GETCW(cw) __asm__ ("sts fpscr,%0" : "=r" (cw))
+
+#if defined __GNUC__
+#define _FPU_SETCW(cw) __set_fpscr ((cw))
+#else
+#define _FPU_SETCW(cw) __asm__ ("lds %0,fpscr" : : "r" (cw))
+#endif
+
+#else
+
+#define _FPU_RESERVED 0xffffffff    /* These bits are reserved and not changed.  */
+
+/* The fdlibm code requires no interrupts for exceptions.  Don't
+   change the rounding mode, it would break long double I/O!  */
+#define _FPU_DEFAULT	0x00000000 /* Default value.  */
+
+#define _FPU_GETCW(cw) 0
+#define _FPU_SETCW(cw) do { } while (0)
+
+#endif /* __SH4__ */
+
+/* Type of the control word.  */
+typedef unsigned int fpu_control_t;
+
+/* Default control word set at startup.  */
+extern fpu_control_t __fpu_control;
+
+#endif /* _FPU_CONTROL_H */
diff -ruN glibc-2.2.5/sysdeps/sh/sh4/fpu/bits/fenv.h glibc-2.2.5.new/sysdeps/sh/sh4/fpu/bits/fenv.h
--- glibc-2.2.5/sysdeps/sh/sh4/fpu/bits/fenv.h	2001-07-10 09:56:53.000000000 +0900
+++ glibc-2.2.5.new/sysdeps/sh/sh4/fpu/bits/fenv.h	1970-01-01 09:00:00.000000000 +0900
@@ -1,72 +0,0 @@
-/* Copyright (C) 1999, 2000 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#ifndef _FENV_H
-# error "Never use <bits/fenv.h> directly; include <fenv.h> instead."
-#endif
-
-
-/* Define bits representing the exception.  We use the bit positions
-   of the appropriate bits in the FPU control word.  */
-enum
-  {
-    FE_INEXACT = 0x04,
-#define FE_INEXACT	FE_INEXACT
-    FE_UNDERFLOW = 0x08,
-#define FE_UNDERFLOW	FE_UNDERFLOW
-    FE_OVERFLOW = 0x10,
-#define FE_OVERFLOW	FE_OVERFLOW
-    FE_DIVBYZERO = 0x20,
-#define FE_DIVBYZERO	FE_DIVBYZERO
-    FE_INVALID = 0x40,
-#define FE_INVALID	FE_INVALID
-  };
-
-#define FE_ALL_EXCEPT \
-	(FE_INEXACT | FE_DIVBYZERO | FE_UNDERFLOW | FE_OVERFLOW | FE_INVALID)
-
-/* The SH FPU supports all of the four defined rounding modes.  We
-   use again the bit positions in the FPU control word as the values
-   for the appropriate macros.  */
-enum
-  {
-    FE_TONEAREST = 0x0,
-#define FE_TONEAREST	FE_TONEAREST
-    FE_TOWARDZERO = 0x1,
-#define FE_TOWARDZERO	FE_TOWARDZERO
-    FE_UPWARD = 0x2,
-#define FE_UPWARD	FE_UPWARD
-    FE_DOWNWARD = 0x3
-#define FE_DOWNWARD	FE_DOWNWARD
-  };
-
-
-/* Type representing exception flags.  */
-typedef unsigned short int fexcept_t;
-
-
-/* Type representing floating-point environment.  This function corresponds
-   to the layout of the block written by the `fstenv'.  */
-typedef struct
-  {
-    unsigned int __fpscr;
-  }
-fenv_t;
-
-/* If the default argument is used we use this value.  */
-#define FE_DFL_ENV	((fenv_t *) -1)
diff -ruN glibc-2.2.5/sysdeps/sh/sh4/fpu/bits/huge_val.h glibc-2.2.5.new/sysdeps/sh/sh4/fpu/bits/huge_val.h
--- glibc-2.2.5/sysdeps/sh/sh4/fpu/bits/huge_val.h	2001-07-10 09:56:53.000000000 +0900
+++ glibc-2.2.5.new/sysdeps/sh/sh4/fpu/bits/huge_val.h	1970-01-01 09:00:00.000000000 +0900
@@ -1,105 +0,0 @@
-/* `HUGE_VAL' constants for IEEE 754 machines (where it is infinity).
-   Used by <stdlib.h> and <math.h> functions for overflow.
-   SH version.
-   Copyright (C) 1992, 1995, 1996, 1997, 1998, 1999, 2000
-   Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#ifndef _MATH_H
-# error "Never use <bits/huge_val.h> directly; include <math.h> instead."
-#endif
-
-#include <features.h>
-
-/* IEEE positive infinity (-HUGE_VAL is negative infinity).  */
-
-#ifdef	__GNUC__
-
-# if __GNUC_PREREQ(2,95)
-
-#  define HUGE_VAL (0x1.0p2047)
-
-# else
-
-#  define HUGE_VAL \
-  (__extension__							      \
-   ((union { unsigned __l __attribute__((__mode__(__DI__))); double __d; })   \
-    { __l: 0x000000007ff00000ULL }).__d)
-
-# endif
-
-#else /* not GCC */
-
-# include <endian.h>
-
-typedef union { unsigned char __c[8]; double __d; } __huge_val_t;
-
-# if __BYTE_ORDER == __BIG_ENDIAN
-#  define __HUGE_VAL_bytes	{ 0, 0, 0, 0, 0x7f, 0xf0, 0, 0 }
-# endif
-# if __BYTE_ORDER == __LITTLE_ENDIAN
-#  define __HUGE_VAL_bytes	{ 0, 0, 0xf0, 0x7f, 0, 0, 0, 0 }
-# endif
-
-static __huge_val_t __huge_val = { __HUGE_VAL_bytes };
-# define HUGE_VAL	(__huge_val.__d)
-
-#endif	/* GCC.  */
-
-
-/* ISO C99 extensions: (float) HUGE_VALF and (long double) HUGE_VALL.  */
-
-#ifdef __USE_ISOC99
-
-# ifdef __GNUC__
-
-#  if __GNUC_PREREQ(2,95)
-
-#   define HUGE_VALF (0x1.0p255f)
-
-#  else
-
-#   define HUGE_VALF \
-  (__extension__							      \
-   ((union { unsigned __l __attribute__((__mode__(__SI__))); float __d; })    \
-    { __l: 0x7f800000UL }).__d)
-
-#  endif
-
-# else /* not GCC */
-
-typedef union { unsigned char __c[4]; float __f; } __huge_valf_t;
-
-#  if __BYTE_ORDER == __BIG_ENDIAN
-#   define __HUGE_VALF_bytes	{ 0x7f, 0x80, 0, 0 }
-#  endif
-#  if __BYTE_ORDER == __LITTLE_ENDIAN
-#   define __HUGE_VALF_bytes	{ 0, 0, 0x80, 0x7f }
-#  endif
-
-static __huge_valf_t __huge_valf = { __HUGE_VALF_bytes };
-#  define HUGE_VALF	(__huge_valf.__f)
-
-# endif	/* GCC.  */
-
-
-/* Generally there is no separate `long double' format and it is the
-   same as `double'.  */
-# define HUGE_VALL HUGE_VAL
-
-#endif /* __USE_ISOC99.  */
diff -ruN glibc-2.2.5/sysdeps/sh/sh4/fpu/bits/mathdef.h glibc-2.2.5.new/sysdeps/sh/sh4/fpu/bits/mathdef.h
--- glibc-2.2.5/sysdeps/sh/sh4/fpu/bits/mathdef.h	2001-07-10 09:56:53.000000000 +0900
+++ glibc-2.2.5.new/sysdeps/sh/sh4/fpu/bits/mathdef.h	1970-01-01 09:00:00.000000000 +0900
@@ -1,78 +0,0 @@
-/* Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#if !defined _MATH_H && !defined _COMPLEX_H
-# error "Never use <bits/mathdef.h> directly; include <math.h> instead"
-#endif
-
-
-/* FIXME! This file describes properties of the compiler, not the machine;
-   it should not be part of libc!
-
-   FIXME! This file does not deal with the -fshort-double option of
-   gcc! */
-
-#if defined __USE_ISOC99 && defined _MATH_H && !defined _MATH_H_MATHDEF
-# define _MATH_H_MATHDEF	1
-
-# ifdef __GNUC__
-#  if __STDC__ == 1
-
-/* In GNU or ANSI mode, gcc leaves `float' expressions as-is.  */
-typedef float float_t;		/* `float' expressions are evaluated as
-				   `float'.  */
-typedef double double_t;	/* `double' expressions are evaluated as
-				   `double'.  */
-
-/* Define `INFINITY' as value of type `float'.  */
-#   define INFINITY	HUGE_VALF
-
-#  else
-
-/* For `gcc -traditional', `float' expressions are evaluated as `double'. */
-typedef double float_t;		/* `float' expressions are evaluated as
-				   `double'.  */
-typedef double double_t;	/* `double' expressions are evaluated as
-				   `double'.  */
-
-/* Define `INFINITY' as value of type `float'.  */
-#   define INFINITY	HUGE_VALF
-
-#  endif
-# else
-
-/* Wild guess at types for float_t and double_t. */
-typedef double float_t;
-typedef double double_t;
-
-/* Define `INFINITY' as value of type `float'.  */
-#  define INFINITY	HUGE_VALF
-
-# endif
-
-/* The values returned by `ilogb' for 0 and NaN respectively.  */
-# define FP_ILOGB0	0x80000001
-# define FP_ILOGBNAN	0x7fffffff
-
-#endif	/* ISO C99 */
-
-#ifndef __NO_LONG_DOUBLE_MATH
-/* Signal that we do not really have a `long double'.  The disables the
-   declaration of all the `long double' function variants.  */
-# define __NO_LONG_DOUBLE_MATH	1
-#endif
diff -ruN glibc-2.2.5/sysdeps/sh/sh4/fpu/fpu_control.h glibc-2.2.5.new/sysdeps/sh/sh4/fpu/fpu_control.h
--- glibc-2.2.5/sysdeps/sh/sh4/fpu/fpu_control.h	2001-07-10 09:56:53.000000000 +0900
+++ glibc-2.2.5.new/sysdeps/sh/sh4/fpu/fpu_control.h	1970-01-01 09:00:00.000000000 +0900
@@ -1,56 +0,0 @@
-/* FPU control word definitions.  SH version.
-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.
-   This file is part of the GNU C Library.
-
-   The GNU C Library is free software; you can redistribute it and/or
-   modify it under the terms of the GNU Lesser General Public
-   License as published by the Free Software Foundation; either
-   version 2.1 of the License, or (at your option) any later version.
-
-   The GNU C Library is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   Lesser General Public License for more details.
-
-   You should have received a copy of the GNU Lesser General Public
-   License along with the GNU C Library; if not, write to the Free
-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.  */
-
-#ifndef _FPU_CONTROL_H
-#define _FPU_CONTROL_H
-
-/* masking of interrupts */
-#define _FPU_MASK_VM	0x0800	/* Invalid operation */
-#define _FPU_MASK_ZM	0x0400	/* Division by zero  */
-#define _FPU_MASK_OM	0x0200	/* Overflow	     */
-#define _FPU_MASK_UM	0x0100	/* Underflow	     */
-#define _FPU_MASK_IM	0x0080	/* Inexact operation */
-
-/* rounding control */
-#define _FPU_RC_NEAREST 0x0	/* RECOMMENDED */
-#define _FPU_RC_ZERO	0x1
-
-#define _FPU_RESERVED 0xffc00000  /* These bits are reserved.  */
-
-/* The fdlibm code requires strict IEEE double precision arithmetic,
-   and no interrupts for exceptions, rounding to nearest.  */
-#define _FPU_DEFAULT	0x00080000 /* Default value.  */
-#define _FPU_IEEE	0x00080f80 /* Default + exceptions enabled. */
-
-/* Type of the control word.  */
-typedef unsigned int fpu_control_t;
-
-/* Macros for accessing the hardware control word.  */
-#define _FPU_GETCW(cw) __asm__ ("sts fpscr,%0" : "=r" (cw))
-
-#if defined __GNUC__
-#define _FPU_SETCW(cw) __set_fpscr ((cw))
-#else
-#define _FPU_SETCW(cw) __asm__ ("lds %0,fpscr" : : "r" (cw))
-#endif
-
-/* Default control word set at startup.	 */
-extern fpu_control_t __fpu_control;
-
-#endif /* _FPU_CONTROL_H */
diff -ruN glibc-2.2.5/sysdeps/sh/sysdep.h glibc-2.2.5.new/sysdeps/sh/sysdep.h
--- glibc-2.2.5/sysdeps/sh/sysdep.h	2001-07-10 09:56:52.000000000 +0900
+++ glibc-2.2.5.new/sysdeps/sh/sysdep.h	2002-08-10 19:12:35.000000000 +0900
@@ -60,7 +60,15 @@
 
 /* If compiled for profiling, call `mcount' at the start of each function.  */
 #ifdef	PROF
-#define CALL_MCOUNT	/* NOTYET */
+#define CALL_MCOUNT					\
+	mov.l	1f,r1;					\
+	sts.l	pr,@-r15;				\
+	mova	2f,r0;					\
+	jmp	@r1;					\
+	 lds	r0,pr;					\
+	.align	2;					\
+1:	.long	mcount;					\
+2:	lds.l	@r15+,pr
 #else
 #define CALL_MCOUNT		/* Do nothing.  */
 #endif
diff -ruN glibc-2.2.5/sysdeps/unix/sysv/linux/sh/Makefile glibc-2.2.5.new/sysdeps/unix/sysv/linux/sh/Makefile
--- glibc-2.2.5/sysdeps/unix/sysv/linux/sh/Makefile	2001-09-30 11:10:43.000000000 +0900
+++ glibc-2.2.5.new/sysdeps/unix/sysv/linux/sh/Makefile	2002-08-10 19:12:35.000000000 +0900
@@ -1,3 +1,7 @@
+ifeq ($(subdir),gmon)
+sysdep_routines += _mcount
+endif
+
 ifeq ($(subdir),io)
 sysdep_routines += pipe
 endif
diff -ruN glibc-2.2.5/sysdeps/unix/sysv/linux/sh/_mcount.S glibc-2.2.5.new/sysdeps/unix/sysv/linux/sh/_mcount.S
--- glibc-2.2.5/sysdeps/unix/sysv/linux/sh/_mcount.S	1970-01-01 09:00:00.000000000 +0900
+++ glibc-2.2.5.new/sysdeps/unix/sysv/linux/sh/_mcount.S	2002-08-10 19:12:35.000000000 +0900
@@ -0,0 +1,67 @@
+/* Machine-specific calling sequence for `mcount' profiling function.  SuperH
+   Copyright (C) 2001 Free Software Foundation, Inc.
+   Contributed by NIIBE Yutaka <gniibe@m17n.org>
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <sysdep.h>
+
+	ASM_GLOBAL_DIRECTIVE C_SYMBOL_NAME(_mcount)
+	ASM_TYPE_DIRECTIVE (C_SYMBOL_NAME(_mcount),function)
+	.align	5
+C_LABEL(_mcount)
+	/* Save registers.  */
+	mov.l	r4,@-r15
+	mov.l	r5,@-r15
+	mov.l	r6,@-r15
+	mov.l	r7,@-r15
+	sts.l	pr,@-r15
+
+	mov.l	@(20,r15),r4
+	sts	pr,r5
+
+#ifdef SHARED
+	mov.l	0f,r1
+	mova	0f,r0
+	add	r1,r0
+	mov.l	1f,r1
+	mov.l	@(r0,r1),r1
+#else
+	mov.l	1f,r1
+#endif
+	jsr	@r1
+	 nop
+
+	/* Pop the saved registers.  */
+	lds.l	@r15+,pr
+	mov.l	@r15+,r7
+	mov.l	@r15+,r6
+	mov.l	@r15+,r5
+	rts
+	 mov.l	@r15+,r4
+
+	.align 2
+#ifdef SHARED
+0:	.long	_GLOBAL_OFFSET_TABLE_
+1:	.long	C_SYMBOL_NAME(__mcount_internal)@GOT
+#else
+1:	.long	C_SYMBOL_NAME(__mcount_internal)
+#endif
+ASM_SIZE_DIRECTIVE(C_SYMBOL_NAME(_mcount))
+
+#undef mcount
+weak_alias (_mcount, mcount)
diff -ruN glibc-2.2.5/sysdeps/unix/sysv/linux/sh/atomicity.h glibc-2.2.5.new/sysdeps/unix/sysv/linux/sh/atomicity.h
--- glibc-2.2.5/sysdeps/unix/sysv/linux/sh/atomicity.h	1970-01-01 09:00:00.000000000 +0900
+++ glibc-2.2.5.new/sysdeps/unix/sysv/linux/sh/atomicity.h	2002-08-10 19:12:35.000000000 +0900
@@ -0,0 +1,110 @@
+/* Low-level functions for atomic operations.  SuperH version.
+   Copyright (C) 2002 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+/* This is an implementation of gUSA ("g" User Space Atomicity) for SuperH
+
+   Reference: Niibe Yutaka, 
+	"gUSA: Simple and Efficient User Space Atomicity Emulation
+	       with Little Kernel Modification"
+	(to be written for Linux Conference 2002, Japan)
+
+   SuperH ABI:
+	r15:	< 0
+	r0:	end point
+	r1:	saved stack pointer
+	r0 + r15 - 2 = re-enterance point #1 (signal)
+	r0 + r15 = re-entrance point #2 (preemption)
+ */
+
+#ifndef _ATOMICITY_H
+#define _ATOMICITY_H	1
+
+#include <inttypes.h>
+
+static inline int
+__attribute__ ((unused))
+exchange_and_add (volatile uint32_t *mem, int val)
+{
+  register unsigned long end_r0 __asm__ ("r0");
+  register unsigned long ssp_r1 __asm__ ("r1");
+  unsigned long dummy;
+  int result;
+
+  __asm__ (".align 2\n\t"
+       "mova	1f,%0\n\t"
+       "mov	r15,%1\n\t"
+       "mov	#-6,r15		! critical region start: reentrance point #1\n"
+   "0:	mov.l	@%4,%2		! reentrance point #2\n\t"
+       "add	%2,%3\n\t"
+       "mov.l	%3,@%4\n"
+   "1:	mov	%1,r15		! critical region end"
+	   : "=&r" (end_r0), "=&r" (ssp_r1), "=&r" (result), "=r" (dummy)
+	   : "r" (mem), "3" (val)
+	   : "memory");
+
+  return result;
+}
+
+static inline void
+__attribute__ ((unused))
+atomic_add (volatile uint32_t *mem, int val)
+{
+  register unsigned long end_r0 __asm__ ("r0");
+  register unsigned long ssp_r1 __asm__ ("r1");
+  unsigned long dummy;
+
+  __asm__ (".align 2\n\t"
+       "mova	1f,%0\n\t"
+       "mov	r15,%1\n\t"
+       "mov	#-6,r15		! critical region start: reentrance point #1\n"
+   "0:	mov.l	@%3,%2		! reentrance point #2\n\t"
+       "add	%4,%2\n\t"
+       "mov.l	%2,@%3\n"
+   "1:	mov	%1,r15		! critical region end"
+	   : "=&r" (end_r0), "=&r" (ssp_r1), "=&r" (dummy)
+	   : "r" (mem), "r" (val)
+	   : "memory");
+}
+
+static inline int
+__attribute__ ((unused))
+compare_and_swap (volatile long int *p, long int oldval, long int newval)
+{
+  register unsigned long end_r0 __asm__ ("r0");
+  register unsigned long ssp_r1 __asm__ ("r1");
+  int value;
+
+  __asm__ (".align 2\n\t"
+       "mova	1f,%0\n\t"
+       "mov	r15,%1\n\t"
+       "mov	#-10,r15	! critical region start: reentrance point #1\n"
+   "0:	mov.l	@%3,%2		! reentrance point #2\n\t"
+       "cmp/eq	%2,%4\n\t"
+       "bf/s	1f\n\t"
+       "movt	%2\n\t"
+       "mov.l	%5,@%3\n"
+   "1:	mov	%1,r15		! critical region end\n"
+	   : "=&r" (end_r0), "=&r" (ssp_r1), "=&r" (value)
+	   : "r" (p), "r" (oldval), "r" (newval)
+	   : "memory","t");
+
+  return value;
+}
+
+#endif /* atomicity.h */
